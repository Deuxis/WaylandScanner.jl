"""
Generation â€” WaylandScanner module for generating Julia expressions with given WL protocol definitions.

Can be used in two ways - one can either evaluate the expressions immediately (preferably in a way that can be done once during precompilation) or serialise the generated code into a Julia script file to "lock" the current state of protocols.

The generated code assumes the core types and message-passing methods to already exist.
"""
module Generation

export genprotocol, generate_script, output_script

using ..WaylandScanner
using ..Parsing
import MacroTools, Dates

function gendocexpr(desc::SDescription)
	docstring = string(desc)
	if !isempty(docstring)
		quote
			$"""
			$docstring
			"""
		end
	else
		quote end
	end
end
gendocexpr(::Nothing) = quote end

"""
    genprotocol(protocol::SProtocol, serverside::Bool = false)

Generate the protocol module expression from parsed `protocol`.

`serverside` will cause client-side code (if set to false, default), or server-side code (if set to true) to be generated.
"""
function genprotocol(protocol::SProtocol, serverside::Bool = false)
	name = tostructid(protocol.name)
	quote
		$(gendocexpr(protocol.description))
		module $name
		$(geninterface.(protocol.interfaces, serverside)...)
		end # module $name
	end
end

"""
	geninterface(interface::SInterface, serverside::Bool = false)

Generate code defining an interface.
"""
function geninterface(interface::SInterface, serverside::Bool = false)
	name = tostructid(interface.name)
	quote
		$(gendocexpr(interface.description))
		struct $name
			id::WlID
		end
		$(genenum.(interface.enums, name)...)
		$((serverside ? genrequest_server.(interface.requests, name) : genrequest_client.(interface.requests, name))...)
		$((serverside ? genevent_server.(interface.events, name) : genevent_client.(interface.events, name))...)
		# end interface $name
	end
end

"""
    genenum(enum::SEnum, ifname::Symbol = "")

Generate code defining a Wayland enum. Sadly, Wayland protocols currently don't declare what enums are used by what, so the best we can do is implement them as simple dictionaries.
"""
function genenum(enum::SEnum, ifname::Symbol = "")
	name = Symbol(string(ifname, tostructid(enum.name)))
	quote
		$(gendocexpr(enum.description))
		const $name = Dict($(genenumpair.(values(enum.entries))...))
	end
end

"""
	genenumpair(entry::SEnumEntry)

Get a `name => value` pair from the `entry`.
"""
genenumpair(entry::SEnumEntry) = entry.name => entry.value

"""
    genrequest(request::SRequest, ifname::Symbol)

Generate code defining a client-side Wayland request method.

The generated method can be used by a client to send a request.
"""
function genrequest_client(request::SRequest, ifname::Symbol)
	name = Symbol(request.name)
	hasargs = request.args != nothing
	args = hasargs ? genarg.(request.args) : []
	argnames = hasargs ? argname.(request.args) : []
	quote
		$(gendocexpr(request.description))
		function $name(obj::$ifname, $(args...))
			message(obj, $(argnames...))
		end
	end
end

argname(arg::SArgument) = Symbol(arg.name)
genarg(arg::SArgument) = :($(argname(arg))::$(arg.type))

"""
    genevent_client(event::SEvent, ifname::Symbol)

Generate code used to listen to a Wayland event.
"""
function genevent_client(event::SEvent, ifname::Symbol)
	name = Symbol(event.name)
	quote
		$(gendocexpr(event.description))
		$"# TODO - event-related code for $name"
	end
end

"""
	generate_script(protocol::SProtocol, serverside::Bool = false)

Serialise the expression into a string.

Useful for writing the definitions into a Julia script file.
"""
function generate_script(protocol::SProtocol, serverside::Bool = false)
	header = """
	# Automatically generated by WaylandScanner's Generation module on $(Dates.now())
	"""
	string(header, '\n', MacroTools.flatten(MacroTools.striplines(genprotocol(protocol, serverside))))
end

"""
	output_script(protocol::SProtocol, filepath::Union{AbstractString,Nothing} = nothing, serverside::Bool = false)

Write the definitions script to a file.
"""
function output_script(protocol::SProtocol, filepath::AbstractString = "./$(protocol.name).jl", serverside::Bool = false)
	open(filepath, "w") do file
		println(file, generate_script(protocol, serverside))
	end
end

function output_script(protocols::Set{SProtocol}, args...)
	for prot in protocols
		output_script(prot, args...)
	end
end

end	# module Generation
